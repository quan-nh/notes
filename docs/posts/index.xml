<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on q-notes</title>
    <link>https://quan-nh.github.io/notes/posts/</link>
    <description>Recent content in Posts on q-notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jul 2018 10:25:15 +0700</lastBuildDate><atom:link href="https://quan-nh.github.io/notes/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>clojure files</title>
      <link>https://quan-nh.github.io/notes/2018/07/clojure-files/</link>
      <pubDate>Thu, 12 Jul 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/07/clojure-files/</guid>
      <description>(require &amp;#39;[clojure.java.io :as io]) ; returns java.io.File object (io/file &amp;#34;/tmp/foo&amp;#34;) ; returns seq of java.io.File in a dir (file-seq (io/file &amp;#34;/tmp&amp;#34;)) ; java.io.File class ; https://docs.oracle.com/javase/7/docs/api/java/io/File.html (.isDirectory %) (.isFile %) (.getName %) (.getPath %) ; create dir (.mkdir (io/file &amp;#34;dir&amp;#34;)) ; delete dir has files (doseq [f (reverse (file-seq (io/file dir)))] (io/delete-file f)) </description>
    </item>
    
    <item>
      <title>learning red/rebol</title>
      <link>https://quan-nh.github.io/notes/2018/07/learning-red/rebol/</link>
      <pubDate>Mon, 02 Jul 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/07/learning-red/rebol/</guid>
      <description>  REBOL/Core Users Guide
 A walkthrough with Red    Helpin&amp;rsquo;Red
  Red by Example
  </description>
    </item>
    
    <item>
      <title>clojure ring</title>
      <link>https://quan-nh.github.io/notes/2018/06/clojure-ring/</link>
      <pubDate>Mon, 25 Jun 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/06/clojure-ring/</guid>
      <description>handler fn: req -&amp;gt; resp
  middleware fn: handler -&amp;gt; handler
 request middleware  (defn wrap-user [handler user-info] (fn [request] (handler (assoc request :user user-info))))  response middleware  (defn wrap-content-type [handler content-type] (fn [request] (let [response (handler request)] (assoc-in response [:headers &amp;#34;Content-Type&amp;#34;] content-type))))  req+resp middleware  (defn wrap-cookies [handler options] (fn [request] (-&amp;gt; request (cookies-request options) handler (cookies-response options))))   middleware order: bottom up</description>
    </item>
    
    <item>
      <title>clojure.string/replace</title>
      <link>https://quan-nh.github.io/notes/2018/06/clojure.string/replace/</link>
      <pubDate>Fri, 22 Jun 2018 14:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/06/clojure.string/replace/</guid>
      <description>clojure.string/replace function is interesting! It can accept different types of input data.
The form of this function:
(clojure.string/replace s match replacement) Where match/replacement can be:
 string/string  (str/replace &amp;#34;The color is red&amp;#34; &amp;#34;red&amp;#34; &amp;#34;blue&amp;#34;) ;=&amp;gt; &amp;#34;The color is blue&amp;#34;  char/char  (str/replace &amp;#34;The color is red&amp;#34; \c \k) ;=&amp;gt; &amp;#34;The kolor is red&amp;#34;  pattern/string  (str/replace &amp;#34;The color is red&amp;#34; #&amp;#34;red&amp;#34; &amp;#34;blue&amp;#34;) ;=&amp;gt; &amp;#34;The color is blue&amp;#34; ;; $1, $2, etc.</description>
    </item>
    
    <item>
      <title>https</title>
      <link>https://quan-nh.github.io/notes/2018/06/https/</link>
      <pubDate>Fri, 22 Jun 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/06/https/</guid>
      <description>   </description>
    </item>
    
  </channel>
</rss>
