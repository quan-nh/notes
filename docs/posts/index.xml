<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on q-notes</title>
    <link>https://quan-nh.github.io/notes/posts/</link>
    <description>Recent content in Posts on q-notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Oct 2020 10:25:15 +0700</lastBuildDate><atom:link href="https://quan-nh.github.io/notes/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ex-info &amp; ex-data</title>
      <link>https://quan-nh.github.io/notes/2020/10/ex-info-ex-data/</link>
      <pubDate>Thu, 15 Oct 2020 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2020/10/ex-info-ex-data/</guid>
      <description>(defn div [x] (try (/ 3 x) (catch Exception e ; ex-info creates an instance of ExceptionInfo, a RuntimeException subclass ; that carries a map of additional data. (throw (ex-info (.getMessage e) {:x x}))))) (try (div 0) (catch Exception e (prn (.getMessage e)) ; &amp;#34;Divide by zero&amp;#34; ; ex-data returns exception map data from ExceptionInfo instance (prn (ex-data e)) ; {:x 0} )) </description>
    </item>
    
    <item>
      <title>Install Java</title>
      <link>https://quan-nh.github.io/notes/2020/06/install-java/</link>
      <pubDate>Tue, 09 Jun 2020 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2020/06/install-java/</guid>
      <description> download openjdk &amp;amp; unzip to /Library/Java/JavaVirtualMachines/ dir  alias j8=&amp;#34;export JAVA_HOME=`/usr/libexec/java_home -v 1.8`; java -version&amp;#34; alias j13=&amp;#34;export JAVA_HOME=`/usr/libexec/java_home -v 13`; java -version&amp;#34; </description>
    </item>
    
    <item>
      <title>Go Pointers</title>
      <link>https://quan-nh.github.io/notes/2020/04/go-pointers/</link>
      <pubDate>Sat, 25 Apr 2020 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2020/04/go-pointers/</guid>
      <description>A pointer holds the memory address of a value.
// pointer types var p *int // The &amp;amp; operator generates a pointer to its operand. i := 42 p = &amp;amp;i // The * operator denotes the pointer&amp;#39;s underlying value (deref). fmt.Println(*p) // read i through the pointer p *p = 21 // set i through the pointer p </description>
    </item>
    
    <item>
      <title>Rust Module</title>
      <link>https://quan-nh.github.io/notes/2020/04/rust-module/</link>
      <pubDate>Fri, 17 Apr 2020 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2020/04/rust-module/</guid>
      <description>The Rust module rules are:
 A source file is just its own module (except the special files main.rs, lib.rs and mod.rs). A directory is just a module path component. The file mod.rs is just the directory&amp;rsquo;s module.  </description>
    </item>
    
    <item>
      <title>Oauth2 Login Flow</title>
      <link>https://quan-nh.github.io/notes/2020/04/oauth2-login-flow/</link>
      <pubDate>Thu, 16 Apr 2020 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2020/04/oauth2-login-flow/</guid>
      <description>   </description>
    </item>
    
    <item>
      <title>Oauth2 Grant Types</title>
      <link>https://quan-nh.github.io/notes/2018/07/oauth2-grant-types/</link>
      <pubDate>Wed, 18 Jul 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/07/oauth2-grant-types/</guid>
      <description>OAuth2 provides several grant types for different use cases.
Authorization Code Grant    Implicit Grant Previously, it was recommended that browser-based apps use the &amp;ldquo;Implicit&amp;rdquo; flow, which returns an access token immediately in the redirect and does not have a token exchange step. The industry best practice has changed to recommend that the authorization code flow be used without the client secret.
 https://tools.ietf.org/html/rfc8252#section-8.2 https://oauth.net/2/pkce/     Password Grant    Client Credentials Grant This grant is suitable for machine-to-machine authentication where a specific userâ€™s permission to access data is not required.</description>
    </item>
    
    <item>
      <title>Clojure Files</title>
      <link>https://quan-nh.github.io/notes/2018/07/clojure-files/</link>
      <pubDate>Thu, 12 Jul 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/07/clojure-files/</guid>
      <description>(require &amp;#39;[clojure.java.io :as io]) ; returns java.io.File object (io/file &amp;#34;/tmp/foo&amp;#34;) ; returns seq of java.io.File in a dir (file-seq (io/file &amp;#34;/tmp&amp;#34;)) ; java.io.File class ; https://docs.oracle.com/javase/7/docs/api/java/io/File.html (.isDirectory %) (.isFile %) (.getName %) (.getPath %) ; create dir (.mkdir (io/file &amp;#34;dir&amp;#34;)) ; delete dir has files (doseq [f (reverse (file-seq (io/file dir)))] (io/delete-file f)) </description>
    </item>
    
    <item>
      <title>Stack &amp; Queue</title>
      <link>https://quan-nh.github.io/notes/2018/07/stack-queue/</link>
      <pubDate>Tue, 03 Jul 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/07/stack-queue/</guid>
      <description>Stack  Java  Stack&amp;lt;Integer&amp;gt; st = new Stack&amp;lt;&amp;gt;(); st.push(1); // st=[1] st.push(2); // st=[1, 2] st.push(3); // st=[1, 2, 3]  // returns the element on the top of the stack, removing it from stack st.pop(); //=&amp;gt; 3, st=[1, 2]  // returns the element on the top of the stack, but does not remove it st.peek(); //=&amp;gt; 2, st=[1, 2]  Clojure Vector  (def st [1 2 3]) ; the functions operate on the right side (peek st) ;=&amp;gt; 3 (pop st) ;=&amp;gt; [1 2] (conj st 4) ;=&amp;gt; [1 2 3 4]  Clojure List  (def st &amp;#39;(1 2 3)) ; the functions operate on the left side (peek st) ;=&amp;gt; 1 (pop st) ;=&amp;gt; (2 3) (conj st 4) ;=&amp;gt; (4 1 2 3) Queue Add last, remove first impl:</description>
    </item>
    
    <item>
      <title>Learning Red/Rebol</title>
      <link>https://quan-nh.github.io/notes/2018/07/learning-red/rebol/</link>
      <pubDate>Mon, 02 Jul 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/07/learning-red/rebol/</guid>
      <description>  REBOL/Core Users Guide
 A walkthrough with Red    Helpin&amp;rsquo;Red
  Red by Example
  </description>
    </item>
    
    <item>
      <title>Ring</title>
      <link>https://quan-nh.github.io/notes/2018/06/ring/</link>
      <pubDate>Mon, 25 Jun 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/06/ring/</guid>
      <description>handler fn: req -&amp;gt; resp
  middleware fn: handler -&amp;gt; handler
 request middleware  (defn wrap-user [handler user-info] (fn [request] (handler (assoc request :user user-info))))  response middleware  (defn wrap-content-type [handler content-type] (fn [request] (let [response (handler request)] (assoc-in response [:headers &amp;#34;Content-Type&amp;#34;] content-type))))  req+resp middleware  (defn wrap-cookies [handler options] (fn [request] (-&amp;gt; request (cookies-request options) handler (cookies-response options))))   middleware order: bottom up</description>
    </item>
    
    <item>
      <title>clojure.string/replace</title>
      <link>https://quan-nh.github.io/notes/2018/06/clojure.string/replace/</link>
      <pubDate>Fri, 22 Jun 2018 14:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/06/clojure.string/replace/</guid>
      <description>clojure.string/replace function is interesting! It can accept different types of input data.
The form of this function:
(clojure.string/replace s match replacement) Where match/replacement can be:
 string/string  (str/replace &amp;#34;The color is red&amp;#34; &amp;#34;red&amp;#34; &amp;#34;blue&amp;#34;) ;=&amp;gt; &amp;#34;The color is blue&amp;#34;  char/char  (str/replace &amp;#34;The color is red&amp;#34; \c \k) ;=&amp;gt; &amp;#34;The kolor is red&amp;#34;  pattern/string  (str/replace &amp;#34;The color is red&amp;#34; #&amp;#34;red&amp;#34; &amp;#34;blue&amp;#34;) ;=&amp;gt; &amp;#34;The color is blue&amp;#34; ;; $1, $2, etc.</description>
    </item>
    
    <item>
      <title>https</title>
      <link>https://quan-nh.github.io/notes/2018/06/https/</link>
      <pubDate>Fri, 22 Jun 2018 10:25:15 +0700</pubDate>
      
      <guid>https://quan-nh.github.io/notes/2018/06/https/</guid>
      <description>   </description>
    </item>
    
  </channel>
</rss>
